Downloading & installation :- 
 -------------------------------------
     
 downloading sql server :- 
 -----------------------------------

 https://www.microsoft.com/en-in/sql-server/sql-server-downloads

 step by step installation of sql server 2022 :- 
 ---------------------------------------------------------

 https://www.sqlshack.com/how-to-install-sql-server-developer-edition/

 download ssms :- 
 --------------------------

 https://learn.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver16

Creating new DB
===============
 After loggin
 >Right click on Databases
  >New Database 
   > (two files are created, one is data file .MDF and one is log file .LDF )

 To find it in explorer (to find files in your system)
 ----------------------
 >Programfiles
  >Microsoft SQL Server
   >MSSQL 15.MSSQLSERVER
    >MSSQL
     >DATA
      >(your created DB)

Datatypes
=========
 >CHAR
  >ASCII // char/varchar allows ascii characters (256 characters) that includes a-z, A-Z, 0-9, special characters, i.e., char/varchar allows alphanumeric
   Examples: PANNO CHAR(10), VEHNO CHAR(10), EMAIL VARCHAR(20)

   >char //allows character data upto 8000 characters,
    recommended for fixed length character columns. 
    Example: NAME CHAR(10) here name can be upto 10 characters,
    in char data type extra bytes are wasted, 
    so char is not recommended for variable length fields 
    and is recommended for fixed length fields.
    Example: GENDER CHAR(1) M F , STATE_CODE CHAR(2) AP TS MH, COUNTRY_CODE CHAR(3) IND USA 
               
   >varchar //for variable length use varchar, allows character data upto 8000.
    Example: NAME VARCHAR(10) SACHIN here extra bytes i.e., 4 bytes are released and 
    allocated to other data

   >varchar(max) //to store more than 8000 characters use varchar(max), upto 2GB, 

  >UNICODE // allows unicode characters (65536 characters),
   that includes characters of diff languages.
   >nchar
   >nvarchar
   >nvarchar(max)

 >INTEGER // allows numbers without decimal part
   >tinyint // 1 byte, value between 0 to 255, Examples: AGE
   >smallint // 2 bytes, value between -32768 to 32768, Examples: EMPID
   >int // 4 bytes, value between -2147483648 to 2147483647
   >bigint // 8 bytes, valid number between -9223372036854775808 to 9223372036854775807

   >numberic(p) // allows numbers upto 38 digits, Examples: EMPID NUMERIC(4) here maximum 
    four digits are allowed like 10, 100, 1000, 2000 but 10000 which is 5 characters not allowed
    AADHARNO NUMERIC(12), ACCNO NUMERIC(13), MOBILE NUMERIC(10)

 >FLOAT
   >numeric(p,s) or decimal(p,s) // allows numbers with decimal (float).
    here P means precision that is total number of digits, 
    S means scale that is number of digits after decimal.
    Examples: SAlARY NUMERIC(7,2) like 10000.50 is valid 500000.60 is invalid, 

 >CURRENCY // used for fields related to money
   >smallmoney // 4 bytes, range is -214748.3648 to 214748.3647
   >money // 8 bytes, range is -922337203685477.5808 to 922337203685477.5807
   Exmaples: SAL SMALLMONEY, BAL MONEY

 >DATE 
   >date // only date
   >time // only time
   >datetime // allows date and time
  Defalut date format for SQL Server is YYYY-MM-DD
  Default time format for SQL Server is HH:MM:SS
  Example: DOB DATE, LOGIN TIME, TXNDT DATETIME gives like 2023-05-11 9:30:00

 >BINARY // allows mutimedia objects like audio, video, images
   >binary // allows upto 8000 bytes
   >varbinary // allows upto 8000 bytes
   >varbinary(max) // allows upto 2GB
  Example: photo BINARY(1000) here 1000 bytes allocated for photo and extra bytes are wasted.
  photo VARBINARY(1000) here extra bytes are released
 

   
To Work with Database
=====================
 >Right click on Databases
  >New Querry // Querry window opens

Creating TABLE 
==============
 > Tablename should start with alphabet, no spaces, only _ $ # are allowed,
   can be upto 128 characters, can have 1024 columns, unlimited rows
   Examples: 123EMPID invalid, EMP 123 INVALID, EMP*123 INVALID, EMP_123 VALID

 CREATE TABLE EMP
 (
 EMPID SMALLINT,
 ENAME VARCHAR(10),
 JOB VARCHAR(10),
 SAL SMALLMONEY,
 HIREDATE DATE,
 DNO TINYINT
 )

 > To check exiting Datatypes
   > SP_HELP

To Display table information
============================
 > SELECT * FROM <tablename> 
   > here from above table its SELECT * FROM EMP

Inserting Date into table
=========================
 > "INSERT" command for inserting data
   > we can insert single row or multiple rows

   > Inserting single row
     --------------------
    > INSERT INTO <TABLENAME> VALUES(V1, V2, V3, V4, V5, V6,.....)
    Examples:
     > INSERT INTO EMP VALUES(100,'SACHIN','CLERK',5000,'2023-05-11',10)
     > INSERT INTO EMP VALUES(101,'VIJAY','ANALYST',8000,getdate(),20) // getdate() returns that current days date

   > Inserting multiple rows
     -----------------------
     > INSERT INTO EMP VALUES(102,'PHANI','MANAGER',9000,'2019-10-05',30),(103,'SINDHU','ANALYST',7000,'2021-04-20',20)

   > Inserting blanks 'null' values (empty) // not equal to 0 or space
     --------------------------------------
     > Nulls can be inserted in two ways
     > Method 1: INSERT INTO EMP VALUES(104,'KUMAR',null,3000,'2020-02-15',null)
     > Method 2: INSERT INTO EMP(EMPID,ENAME,SAL,HIREDATE) VALUES(105,'JAMES',5000,getdate()) // remaining fields job,dno filled with nulls



120523

 Operators in SQL Server
 =======================

 + - * / % for calculation
 gives value as output

 Relational operators in SQL Server
 ==================================

 => > >= < <= = <> or !=
 gives True/False as output

 10 > 5 True
 10 < 5 False
 10 = 5 False
 10 <> 5 True ~ 10 != 5 True

 Logical Operators in SQL Server
 ===============================

 AND OR NOT

 Special Operators in SQL Server
 ===============================

 BETWEEN
 IN
 LIKE
 IS
 ANY
 ALL
 EXITS

 Set Operators in SQL Server
 ===========================

 UNION
 UNION ALL
 INTERSECT
 EXCEPT

 Display Data in SQL Server
 ==========================
 
 > "SELECT" command is used to display data from the table.

 syn: SELECT <col/*> FROM <tabname>; // this whole statement is called querry or command and SELECT and FROM  are called clauses

 SQL = English
 QUERIES = Sentences
 CLAUSES = Words

 FROM clause -> specify tablename
 SELECT clause -> specify column names
 * -> all columns

 > Display employee names and salaries/hiredate/dno
 SELECT ENAME,SAL FROM EMP
 SELECT ENAME,HIREDATE FROM EMP
 SELECT ENAME,DNO FROM EMP

 > Display all the data from EMP
   Syntax:
     SELECT * FROM EMP //shows all the data

 > WHERE caluse: ( Display specific )
   ===============
   Used to access specific row/rows based on a condition

 SELECT columns
 FROM tabname
 WHERE condition

 conditions: ( made of relational operators )
  COLNAME OP VALUE
   > OP is any relational operator like > >= < <= = <>
   > if cond is true row is selected
   > if cond is false row is not selected
 Examples:
 ---------
  Display employee details whose id = 102
  > SELECT * FROM EMP WHERE EMPID=102 // goes every row and checks true or false and shows all the datails because '*'
  > SELECT ENAME FROM EMP WHERE EMPID=102 //only name will be shown here 
  Display employee details whose name = 'Kumar'
  > SELECT * FROM EMP WHERE ENAME = 'Kumar' // '' mandatory to display sting
  Display employee details who earn more then 5000
  > SELECT * FROM EMP WHERE SAL > 5000
  Display employees joined after 2020
  > SELECT * FROM EMP WHERE HIREDATE > 2020 // date is incompatable with number
  > SELECT * FROM EMP WHERE HIREDATE > '2020-12-31' // Hiredate date type is compated with '2020-12-31' which is also date type
  Display employees joined before 2020
  > SELECT * FROM EMP WHERE HIREDATE < '2020-01-01'
  Display employees not working for Dno 10
  > SELECT * FROM EMP WHERE DNO <> 10

 Adding multiple condtions to single querry
 Compound condtion:
 ==================
 Multilple condtions combined with AND / OR operators is called compound condtion.
 > WHERE COND1 AND/OR COND2 
 Examples:
 ---------
  > WHERE CATEGORY = 'MOBILES' AND PRICE < 20000 // only mobiles under 20000
  > WHERE CATEGORY = 'MOBILES' OR PRICE < 20000 // any product that is under 20000, satisfying one condtion is enough
  Display Employee details whose id = 100, 103, 105
  > SELECT * FROM EMP WHERE EMPID = 100 OR EMPID = 103 OR EMPID = 105
  Display employees working as clerk, analyst
  > SELECT * FROM EMP WHERE JOB = 'CLERK' OR JOB = 'ANALYST'
  Display employees working as analyst beloging to 20th Dept
  > SELECT * FROM EMP WHERE JOB = 'ANALYST' AND DNO = '20'
  Display employees earning >5000 and <10000
  > SELECT * FROM EMP WHERE SAL > 5000 AND SAL < 10000
  Display employees joined in 2020
  > SELECT * FROM EMP WHERE HIREDATE >= '2020-01-01' AND HIREDATE <= '2020-12-31'
  Display employees working as clerk, analyst and earning more than 5000
  > SELECT * FROM EMP WHERE JOB = 'CLERK' OR JOB = 'ANALYST' AND SAL > 5000 // here JOB = 'ANALYST' AND SAL = 5000 are compared first i.e AND is prioritized and then it'll compare with JOB = 'CLERK'
  > SELECT * FROM EMP WHERE ( JOB = 'CLERK' OR JOB = 'ANALYST' ) AND SAL > 5000 // () to force comparision
   
 
130523

  IN Operator
  ===========
   >Use IN operator for comparision with list.
    >List is like 10, 20, 30, 40...
   >Use IN operator for "=" comparision with multiple values.
    > WHERE COLNAME = V1,V2,V3... //is invalid, = cannot be used with multiple values
    > WHERE COLNAME IN(V1,V2,V3...) //is valid, if you want to use = with multiple values

    >Display employees whose id = 100,103,105
      > SELECT * FROM EMP WHERE EMPID IN (100,103,105) //Old WHERE EMPID = 100 OR EMPID = 103 OR EMPID =105
    >Display employees working as clerk, manger
     > SELECT * FROM EMP WHERE JOB IN ('CLERK', 'MANAGER')
    >Display employees not working for deptno 10,20
     > SELECT * FROM EMP WHERE DNO NOT IN (10,20)

  WHERE Operator
  ==============
   >Use BETWEEN operator for comeparision with range
    >like 10 to 50 is called range ( all the values between 10 and 50 are included i.e., 10,11,12,.....48,49,50)
    > WHERE COLNAME BETWEEN V1 AND V2 // is equivalent to COL>=V1 AND COL<=V2

    >Display the employees earning between 5000 and 10000
     > SELECT * FROM EMP WHERE SAL BETWEEN 5000 AND 10000 //always use BETWEEN with lower limit and Upper limit
    >Display the employees joined in 2020 year
     > SELECT * FROM EMP WHERE HIREDATE BETWEEN '2020-01-01' AND '2020-12-31'
    >Display the employees not joined in 2020 year
     > SELECT * FROM EMP WHERE HIREDATE NOT BETWEEN '2020-01-01' AND '2020-12-31'
    >Display the employees working as Clerk, manager and earning between 5000 and 10000 and joined in 2019 and not working for deptno 10,20
     > SELECT * FROM EMP WHERE JOB IN ('CLERK', 'MANAGER') AND SAL BETWEEN 5000 AND 10000 AND HIREDATE BETWEEN '2019-01-01' AND '2019-12-31' AND DNO NOT IN (10,20)
    
    PRODUCTS
    PRODID PNAME PRICE CATEGORY BRAND
    
    >Display list of Samsung, Redmi, Realme mobile phones between 10000 and 20000
     > SELECT * FROM PRODUCTS WHERE CATEGORY = 'MOBILES' AND BRAND IN ('SAMSUNG', 'REDMI', 'REALME') AND PRICE BETWEEN 10000 AND 20000
    
    CUSTOMERS
    CID NAME CITY AGE GENDER

    >Display the list of male customers staying in HYD, MUM, DEL aged between 20 and 30
     > SELECT * FROM CUSTOMERS WHERE GENDER = 'MALE' AND CITY IN ('HYD', 'MUM', 'DEL') AND AGE BETWEEN 20 AND 30

  LIKE Operator
  =============

   >Use LIKE operator for comparision of patterns
    > WHERE COLNAME LIKE 'PATTERN'
   >Pattern contains alphabets, digits, wildcard characters

   >Wildcard characters
    --------------------
    > % => 0 or many characters
    > _ => exactly 1 characters

    >Display employees with name starting with 'S' // remaining characters we don't know
     > SELECT * FROM EMP WHRE ENAME LIKE 'S%'
    >Display employees with name ending with 'S'
     > SELECT * FROM EMP WHERE ENAME LIKE '%S'
    >Display employees with name containing 'A'
     > SELECT * FROM EMP WHERE ENAME LIKE '%A%'
    >Display employees with 'A' is the 3rd character of their name
     > SELECT * FROM EMP WHERE ENAME LIKE '__A%' // two underscores before A
    >Display employees with 'A' is the 3rd character of their name from last 
     > SELECT * FROM EMP WHERE ENAME LIKE '%A__' // two underscores after A
    >Display employees with name containing 4 characters
     > SELECT * FROM EMP WHERE ENAME LIKE '____' // four underscores, each underscore is equal to one character
    >Display employees joined in Feb month
     > SELECT * FROM EMP WHERE HIREDATE LIKE '_____02___' // date format is YYYY-MM-DD , %02% does not give only feb but also take dates like 2002-10-15, 2020-02-10, 2023-01-02 it may be month year or day, by giving _____02___ we're forcing SQL to consider it as month
    >Display employees joined in 2020 year
     > SELECT * FROM EMP WHERE HIREDATE LIKE '2020%' // % replaces -MM-DD or use 6 underscores after 2020

150323

 IS Operator 
 ===========
   > For comparision with NULL/ NOT NULL
     > WHERE COLNAME IS NULL
     > WHERE COLNAME IS NOT NULL // NULL cannot be compared with = , must be compared with IS Operator

     > Display empleyees not assigened to any dept
       > SELECT * FROM EMP WHERE DNO IS NULL
     > Display empleyees not assigened to any job
       > SELECT * FROM EMP WHERE JOB IS NULL
     > Display empleyees who are assigened to any dept
       > SELECT * FROM EMP WHERE DNO IS NOT NULL
 
 Summary:
 --------
   WHERE COLNAME IN (V1,V2,V3,V4,V5,V6....)
   WHERE COLNAME BETWEEN V1 AND V2
   WHERE COLNAME LIKE 'PATTERN'
   WHERE COLNAME IS NULL

 Examples:

  STUDENT
  SID SNAME S1 S2 S3
  1   A     80 90 70
  2   B     30 60 50

   > Display list of students who are passed
     > SELECT * FROM STUDENT WHERE S1>=35 AND S2>=35 AND S3>=35
   > Display list of students who are failed
     > SELECT * FROM STUDENT WHERE S1<35 OR S2<35 OR S3<35
  
  CREATE INSERTING DATA Another method ( UI Method)
  =============================
    > Select DB ( your created)
     > right click on table
       > new table
         > click save after entering data
         > Table created

    > Right click on table
      > Edit     

 > ALIAS:
  =======
   > Alias means another name
   > Used to change column headings
   > Syntax: COLNAME / EXPRESSION AS <ALIAS>
   > Examples: // In SELECT on column headings and arthematic calculations are allowed
     > Display ENAME ANNUAL SAlARY
       >SELECT ENAME,SAL*12 AS [ANNUAL SALARY] // name should not contain space, keep it in [] / "" to make it exceptional
     > Display a Table named 123 and (A INT, B INT, C INT)
       > CREATE TABLE [123](A INT, B INT, C INT)
     > Display a Table with ENAME SAL DA TAX TOTSAL
       > HRA House Rent Allowance, take it 20% on sal 
       > DA Dearness Allowance, take it 30% on sal
       > TAX is tax, take it as 10% on sal
       > TOTSAL is SAL+HRA+DA-TAX
       > SELECT ENAME,SAL,SAL*0.2 AS HRA,SAL*0.3 AS DA,SAL*0.1 AS TAX,SAL + (SAL*0.2) + (SAL*0.3) - (SAL*0.1) AS TOTSAL FROM EMP

 > ORDER BY Clause:
  =================
   > Used to sort rows based on one or more columns 
     either in ascending or descending order.
   > SELECT columns FROM tabname [WHERE condition] ORDER BY colname ASC/DESC, ...
   > Default order is ASC for descending order use DESC option
   > Examples:
     > Arrange Employee list name wise asc order 
       > SELECT * FROM EMP ORDER BY ENAME ASC 
     > Arrange Employee list salary wise descending order
       > SELECT * FROM EMP ORDER BY SAL DESC
     > Arrange Employee list dept wise ascending order and with in dept sal wise descending
       > SELECT * FROM EMPNO,ENAME,SAL,DEPTNO FROM EMP ORDER BY DEPTNO ASC, SAL DESC


160523
 
 To delete the table
  > DROP TABLE <tablename>

 Examples:
 ---------
  > STUDENT
    SNO SNAME M  P  C
    1   A     80 90 70
    2   B     60 70 50
    3   C     90 80 70
    4   D     90 70 80
   > Arrange student list average wise descending order, m descending order, p descending order
     > SELECT * FROM STUDENTS ORDER BY (M+P+C)/3 DESC,M DESC,P DESC 
     > but to display average in output SELECT *, (M+P+C)/3 AS AVG FROM STUDENTS ORDER BY (M+P+C)/3 DESC,M DESC,P DESC


  > Display empleyees working as Clerk, manager and arrange list sal wise descending orderorder
   > SELECT EMPNO,ENAME,JOB,SAL FROM EMP WHERE JOB IN ('CLERK','MANAGER') ORDER BY SAL DESC
  
  > Note: Nulls are considered as low in sorting
    > like in ascending order nulls are arranged first and viseversa for descending order.

 DISTINCT clause:
 ----------------
   > ELeminates duplicates from select statement output
   > Syntax
     > DISTINCT col
     > DISTINCT col1,dol2,...
     > DISTINCT *

   > Example
     > SELECT DISTINCT JOB FROM EMP ANALYST CLERK MANAGER PRESIDENT SALESMAN
     > SELECT DISTINCT DEPTNO FROM EMP
       > 10
         20
         30
  
 TOP clause:
 -----------
   > To select top N rows of table
   > SELECT TOP <n> colnames/* FROM tablename [WHERE cond] [ORDER BY colnames]

   > Examples
     > Display first 5 rows from EMP table
       > SELECT TOP 5 EMPNO,ENAME,SAL FROM EMP

     > Display TOP 5 highest paid Employees based on salary
       > SELECT TOP 5 EMPNO,ENAME,SAL FROM EMP ORDER BY SAL DESC 
     
     > Display TOP 5 empleyees based on experience
       > SELECT TOP 5 EMPNO,ENAME,SAL,HIREDATE FROM EMP ORDER BY HIREDATE ASC //here ASC means who joined first will come first
     
     > Display TOP 3 Maximum salaries from empleyee list
       > SELECT DISTINCT TOP 3 SAL FROM EMP ORDER BY SAL DESC // DISTINCt is applied to elemenate duplicates

 DML Commands: ( Data Manipulation language)
 ---------------------------------------

   > Lke INSERT UPDATE DELETE MERGE
   > DML commands acts on table data
   > All these operations are auto committed i.e., 'automatically saved'
     > To STOP autp commit execute the following command
       > SET IMPLICIT_TRANSACTIONS ON
     > To Save operations execute COMMIT command //as auto save is off from the above command
     > To cancel operations execute ROLLBACK command
   
   > INSERT
     > To create new row // refer 118 line INSERT at the start 

   > UPDATE command
     > command used to modify data, can update all rows are specific row, 
       can update sigle column or multiple columns

     > Syntax 
        > UPDATE tablename SET colname = value, colname = value,.... WHERE condition

     > Examples:
       > Update all empleyee commision with 500
         > UPDATE EMP SET COMM = 500
       > Update empleyee commision with 500 whose commision is null
         > UPDATE EMP SET COMM = 500 WHERE COMM IS NULL
       > Update commision with Null whose commision is not equal to null
         > UPDATE EMP SET COMM = NULL WHERE COMM IS NOT NULL // null assignment is = and null comparision is 'IS'
       > Update salary with 2000 and commision with 500 whose id = 7369
         > UPDATE EMP SET SAL = 2000, COMM = 500 WHERE EMPNO = 7369
       > Update increment salary by 20% and commision by 10% who working as SALESMAN and joined in 1981 
         > UPDATE EMP SET SAL = SAL + (SAL * 0.2) COMM = COMM + (COMM * 0.1) WHERE JOB = 'SALESMAN' AND HIREDATE LIKE '1981%'


170523

 Examples:
  > PRODUCTS
    prodid pname price category BRAND
   >Increase the price of all samsung, realme, oneplus brand mobile phones by 10%
     > UPDATE PRODUCTS SET PRICE = PRICE + (PIRCE*0.1) WHERE BRAND IN ('SAMSUNG','REALME','ONEPLUS') AND CATEGORY = 'MOBILES'

  DELETE command
  ==============
   > Command used to delete row/rows based on condition
   > We can delete all rows or specific row
   > Syntax 
      > DELETE FROM <tablename> [WHERE condition] // if Where condition is not given all rows are deleted
   > Examples 
     > Delete all rows from EMP table // dont forget to execute 'SET IMPLICIT_TRANSACTIONS ON' and save manually 'COMMIT'
       > DELETE FROM EMP
     > Delete empleyees joined in 1980
       > DELETE FROM EMP WHERE HIREDATE LIKE '1980%'

  DDL commands: ( DATA DEFINITION LANGUAGE)
  =============
   > CREATE ALTER DROP TRUNCATE are called DDL commands
   > All DDL commands acts on table structure (columns, datatype and size)

   ALTER command:
   --------------
    > command used to modify table structure
    > using ALTER command we can 
      > Add columns
      > Drop columns
      > modify columns
        > changing datatype
        > changing size
     Adding columns:
     > syntax 
        > ALTER TABLE <tablename> ADD COLNAME DATATYPE(size), COLNAME DATATYPE(size),...
     > Examples:
       > Add column gender to emp table
         > ALTER TABLE EMP ADD GENDER CHAR(1) // by default new column is filledw with 'NULL'
         > To insert data into new column use update command
          > UPDATE EMP SET GENDER = 'M' WHERE EMPNO = 7499
  
     Dropping columns:
       > ALTER TABLE <tablename> DROP COLUMN COL1, COL2
       > Examples:
       > Drop column gender from EMP table
       > ALTER TABLE EMP DROP COLUMN GENDER
  
     Modify columns:
       > Syntax:
         > ALTER TABLE <tablename> ALTER COLUMN <colname> TYPE(SIZE)
       > Examples:
         > Increase size of ENAME to 20
           > ALTER TABLE EMP ALTER COUMN ENAME VARCHAR(20) // decrease also possible upto the exisiting data size
         > Change data type of EMPNO to INT
           > AKTER TABLE EMP ALTER COLUMN EMPNO INT // ALTER TABLE EMP ALTER COLUMN EMPNO TINYINT gives ERROR as exiting values are bigger for tinyint

   DROP Command:
   -------------
   > Command drops table from DB
   > Drops table structure along with data
   > Syntax:
      > DROP TABLE <tablename>
   > Examples:
     > DROP TABLE EMP
  
   TRUNCATE command:
   ----------------
    > Deletes all data from the table but keeps structure
    > Will empty the table 
    > Releases moemory allocated for table
    > When truncate is executed sql server goes 
      to memory and releases all the pages allocated for the table
      and when pages are released then date stored in the page also deleted
    > Syntax: TRUNCATE TABLE <table name>
    > Examples: TRUNCATE TABLE EMP

   Question: Differetiate between DROP DELETE TRUNCATE
     > DROP deletes table structure with data
     > DELETE/TRUNCATE deletes only data but not structure
     > DELETE VS TRUNCATE
       > DELETE comes under DML , TRUNCATE comes under DDL
       > DELETE can delete specific rows, TRUNCATE cannot delete specific rows
       > Where condition can be used with DELETE, Where condition cannot be used with TRUNCATE
       > DELETE command deletes row by row, TRUNCATE deletes all rows at a time but cannot single row
       > DELETE is slower, TRUNCATE is faster
       > DELETE will not release memory, TRUNCATE will release memory immediately
       > DELETE will not reset identity, TRUNCATE will reset identity
  
   SP_REMANE: ( SP is STORED PROCEDURE)
   -------------------------------------
     > Used to change the tablename and column name
     > Syntax:
       > SP_REMANE '<oldname>', '<newname>'
     > Examples:
        > Rename EMP table to EMPLOYEES table
         > SP_REMANE 'EMP','EMPLOYEES'
        > Rename column commision to bonus
         > SP_REMANE 'EMPLOYEES.COMM','BONUS' // <tablename.columnname> to change column name in the table

180523

 > Built-in Functions in SQL Server:
   =================================
    > A function accepts some inputs performs some calculations and returns one result

    > Types of functions:
      -------------------
       > DATE STRING NUMERIC CONVERSION SPECIAL ANALYTICAL AGGREGATE 

       > DATE Functions:
         > GETDATE():
           > Returns current date, time and milliseconds
             > SELECT GETDATE() returns 2023-05-18 11:26:41.820 

         > DATEPART():
           > Function used to extract part of the date
             > DATEPART(INTERVAL,DATE)
             > Examples:
               > SELECT DATEPART(YY,GETDATE()) returns 2023
               > SELECT DATEPART(MM,GETDATE()) returns 05
               > SELECT DATEPART(DD,GETDATE()) returns 18
               > SELECT DATEPART(DW,GETDATE()) returns 5 // 1 for Sunday .... 7 for Saturday ....
               > SELECT DATEPART(HH,GETDATE()) returns Hours
               > SELECT DATEPART(MI,GETDATE()) returns Minutes
               > SELECT DATEPART(SS,GETDATE()) returns Seconds
               > SELECT DATEPART(Q,GETDATE()) returns Quarter // like 1 Jan- Mar, 2 Apr- Jun, 3 Jul- Sept, 4 Oct- dec
               > SELECT DATEPART(DAYOFYEAR,GETDATE()) returns day in a year
               > SELECT DATEPART(DY,GETDATE()) returns day in a year

               > Display Employees joined in 1980, 1983, 1985
                 >SELECT * FROM EMP WHERE DATEPART(YY,HIREDATE) IN (1980,1983,1985)

               > Display Employees joined in leap year
                 > SELECT * FROM EMP WHERE DATEPART(YY,HIREDATE) % 4 = 0
               
               > Display Employees joined in January, April, December months
                 > SELECT * FROM EMP WHERE DATEPART(MM,HIREDATE) IN (1,4,12)
               
               > Display Employees joined on Sunday
                 > SELECT * FROM EMP WHERE DATEPART(DW,HIREDATE) IN (1)

               > Display Employees joined in 2nd quarter of 1981
                 > SELECT * FROM EMP WHERE DATEPART(YY,HIREDATE) = 1981 AND DATEPART(Q,HIREDATE) = 2
               
         > DATENAME();
           > Used to extract part of the date

           >                  MM                    DW
           > DATEPART          5                     5
           > DATENAME          MAY                   THURSDAY

          > Examples:
             > Display Employee with name and joinday
               > SELECT ENAME, DATENAME(DW,HIREDATE) AS DAY FROM EMP

             > Display day of India's Independence Day
               > SELECT DATENAME(DW,'1947-08-15')
           
         > FORMAT():
           > Used to display dates in different formats
           > FORMAT(DATE,'<format>')
           
           > Examples:
             > SELECT FORMAT(GETDATE(),'dd-MM-yyyy')
             > SELECT FORMAT(GETDATE(),'MM/dd/yyyy')

             > Display the name hiredate, hiredate in MM/DD,YYYY format
               > SELECT ENAME,FORMAT(HIREDATE,'MM/dd/yyyy')AS HIREDATE FROM EMP
             
             > SELECT FORMAT(GETDATE(),'DD-MM-yyyy hh:mm:ss') // can get both date and time with formats

             > Display the list of empleyees joined today
               > SELECT * FROM EMP WHERE HIREDATE = FORMAT(GETDATE(),'yyyy-MM-dd')
         
         > DATEDIFF():
           > Function used to find difference between two dates
           > DATEDIFF(INTERVAL,START DATE, END DATE)

           > Examples:
             > SELECT DATEDIFF(YY,'2022-05-18',GETDATE()) returns 1
             > SELECT DATEDIFF(MM,'2022-05-18',GETDATE()) returns 12
             > SELECT DATEDIFF(DD,'2022-05-18',GETDATE()) returns 365
            
             > Display name amd experience in years
               > SELECT ENAME,DATEDIFF(YY,HIREDATE,GETDATE()) AS EXPERIENCE FROM EMP

             > Display name amd experience in years,months
               > SELECT ENAME,DATEDIFF(MM,HIREDATE,GETDATE())/12 AS YEARS, DATEDIFF(MM,HIREDATE,GETDATE())%12 AS MONTHS FROM EMP

190523

         > DATEADD():
           > Used to add/subtract days, months,years to/from a date.
           > Syntax:
             > DATEADD(INTERVAL, INT, DATE)
           > Examples:
             > Add 10 days to GETDATE()
               > SELECT DATEADD(DD, 10, GERDATE()) gives 2023-05-29 
             > Add 2 months to GETDATE()
               > SELECT DATEADD(MM,2,,GETDATE()) gives 2023-07-19
             > subtract 1 year from GETDATE()
               > SELECT DATEADD(YY,-1,GETDATE()) gives 2022-05-19

             > Scenario:
               > GOLD_RATES
                 DATEID         RATE
                 2020-01-01      ?
                 2020-01-02      ?

                 2023-05-19      ?

               > Display today's gold rate
                 > SELECT * FROM GOLD_RATES WHERE DATEID = FORMAT(GETDATE(),'yyyy-MM-dd')

               > Display yesterday's gold rate
                 > SELECT * FROM GOLD_RATES WHERE DATEID = FORMAT(DATEADD(DD,-1,GETDATE()),'yyyy-MM-dd')

               > Display last month same day gold rate
                 > SELECT * FROM GOLD_RATES WHERE DATEID = FORMAT(DATEADD(MM,-1,GETDATE()),'yyyy-MM-dd')

               > Display last year same day gold rate
                 > SELECT * FROM GOLD_RATES WHERE DATEID = FORMAT(DATEADD(YY,-1,GETDATE()),'yyyy-MM-dd')

               > Display last one month gold rates
                 > SELECT * FROM GOLD_RATES WHERE DATEID BETWEEN DATEADD(MM,-1,GETDATE()) AND GETDATE()

 ----------------------------------------------------------------------------------------------------------------------
 NOTE:
   > SQL Server date stats from 1900-01-01 , 
     > Examples:
       > FIrst date in SQL calender
         > SELECT DATEADD(DD,0,0) gives 1900-01-01
 ----------------------------------------------------------------------------------------------------------------------

          > EOMONTH():
            > Returns last day of the month
            > Syntax:
              > EOMONTH(DATE,INT)
            > Examples:
              > SELECT EOMONTH(GETDATE(),0) gives 2023-05-31
              > SELECT EOMONTH(GETDATE(),1) gives 2023-06-30
              > SELECT EOMONTH(GETDATE(),-1) gives 2023-04-30
              > Display next month first day
              > Display current month first day
              > Display next year first day
              > Display current year first day

       > STRING FUNCTIONS:
        -------------------

         > UPPER():
           > Used to convert string to uppercase
           > Syntax:
             > UPPER(string)
           > Examples:
             > SELECT UPPER('hello') gives HELLO
         
         > LOWER():
           > Used to convert string to lowercase
           > Syntax:
             > LOWER(string)
           > Examples:
             > SELECT LOWER('HELLO') gives hello

             > Display EMPNO ENAME SAL, names in lowercase
               > SELECT EMPNO,LOWER(ENAME) AS ENAME, SAL FROM EMP // SELECT will only display data not modify actual table data

             > Change names to lowercase in table
               > UPDATE EMP SET ENAME = LOWER(ENAME) // UPDATE changes data in table itself
               
         > LEN():
           > Returns string length i.e., no of characters
           > Syntax:
             > LEN(string)
           > Examples:
             > SELECT LEN('hello world') gives 11 characters

             > Display Employee name and length of the name
               > SELECT ENAME, LEN(ENAME) AS LENGTH FROM EMP 
             > Display Employee names containing 4 characters
               > SELECT * FROM EMP WHERE ENAME LIKE '____' // not idel for all scenarios , like 30 characters
               > SELECT * FROM EMP WHERE LEN(ENAME)=4 

         > LEFT()
           > Returns characters starting from left
           > Syntax
             > LEFT(string,LEN)
           > Examples
             > SELECT LEFT('hello world',5) returns 5 characters starting from left side

             > Display empleyee names starting with 's'
               > SELECT * FROM EMP WHERE LEFT(ENAME,1)='s'
         
         > RIGHT()
            > Returns characters starting from right side
            > Syntax
              > RIGHT(string,LEN)
            > Examples
              > SELECT RIGHT('hello world',7) gives o world

              > Display Employee names that ends with 's'
                 > SELECT * FROM EMP WHERE RIGHT(ENAME,1)='s'
              > Display Employee names that start and end with same characters
                 > SELECT * FROM EMP WHERE LEFT(ENAME,1) = RIGHT(ENAME,1)
         
         > SUBSTRING():
           > Returns characters starting from specific position
           > Syntax 
             > SUBSTRING(string,start,len)
           > Examples 
             > SELECT SUBSTRING('hello world',7,4) gives worl
             > SELECT SUBSTRING('hello world',10,3) gives ld
             
             > Scenario:
               > Generate emailids for employees
                 > EMPNO    ENAME     EMAILID
                   7369     Smith      smi736@tcs.com
                   7499     Allen      all749@tcs.com
               > SELECT EMPNO, ENAME, LEFT(ENAME,3) + LEFT(EMPNO,3) + '@tcs.com'AS EMAILID FROM EMP // displays only

               > Add EMAILID in DB
                > Step 1 : Add EMAILID column to EMP table
                   > ALTER TABLE EMP ADD EMAILID VARCHAR(30)
                > Step 2 : Update the column with emailids
                   > UPDATE EMP SET EMAILID = LEFT(ENAME,3) + LEFT(EMPNO,3) + '@tcs.com'

200523

 > CHARINDEX():
   ------------
    > Used to returns position of a character in a string
    > syntax
      > CHARINDEZ(CHAR,STRING,[START]) // START is optional
    > Examples:
      > SELECT CHARINDEX('O','HELLO WELCOME') returns 5 // if characteris retunrs postion, if not retunrs 0
      > SELECT CHARINDEX('X','HELLO WELCOME') returns 0

      > In 'HELLO WELCOME" find position of O starting from 6
        > SELECT CHARINDEX('O','HELLO WELCOME',6) returns 11

      > Assignment
        > CUST
          CID    NAME
          10     SACHIN TENDULKAR
          11     ROHIT SHARMA

          > Display CID FNAME      LNAME
                    10  SACHIN     TENDULAKAR  
            using LEFT RIGHT SUBSTRING CHARINDEX

  > REPLICATE():
    ------------
    > Used to repeat character for  given numboer of times
    > Syntax:
      > REPLICATE(CHAR,LEN)
    > Examples:
      > SELECT REPLICATE('*',5) gives ***** // 5 stars

      > Display salaries as stars
        > SELECT ENAME,REPLICATE('*',LEN(SAL)) AS SAL FROM EMP

      > Scenario
        > ACCOUNTS 
          ACCNO               ACTYPE    BAL
          1234567892          S         10000
         > Display 'your a/c no XXXX8962 debited _____' // XXXX in place of number 
            > REPLICATE('X',4) + RIGHT(ACCNO,4)

  > REPLACE():
   -----------
   > Used to replacee one string with another string
   > Syntax:
     > REPLACE(str1,str2,str3) returns in str1, str2 replaced with str3
   > Examples:
     > Replace 'ell' with 'abc' in 'hello'
       > SELECT REPLACE('hello','ell','abc') returns 'habco'
     > Replace 'l' with 'abc' in 'hello'
       > SELECT REPLACE('hello','l','abc') returns 'heabcabco'
     > Replace 'elo' with 'abc' in 'hello'
       > SELECT REPLACE('hello','elo','abc') returns 'hello' // 'elo' is not there in string so not replaced
     > Removing unwanted characters, like '@' here 
       > SELECT REPLACE('@@he@@ll@@o@@','@','') gives 'hello' // '' refers null
     > Remove only last ',' in " a,b,c,d,c,e, "
       > 

  > STUFF();
    -------
    > Also similar to replace i.e., used to replace one string with another string
    > Based on start and length
    > Syntax:
       > STUFF(string1,start,length,string2)
    > Examples:
       > Replace 3 characters with 'ABC' starting from 10th character in 'HELLO WELCOME'
         > SELECT STUFF('HELLO WELCOME',10,3,'ABC') gives 'HELLO WELABC'
       > SELECT STUFF('A,B,C,D,',8,1,") gives A,B,C,D

  > TRANSLATE():
    ------------
    > Used to translate one character to another character.
    > Translation cannot be null like SELECT TRANSLATE('HELLO','ELO','') gives ERROR
    > Syntax:
      > TRANSLATE(str1,str2,str3)
    > Examples:
      > SELECT TRANSLATE('HELLO','ELO','ABC') gives 'HABBC' // here E to A, L to B, O to C

    > Note: TRANSLATE function can be used to encrypt data i.e., changing plain text to cipher text
      > Examples:
        > Encrypt Salaries of EMP table
          > SELECT ENAME,TRANSLATE(SAL,'0123456789.','$bT*k@G^#%&') AS SAL FROM EMP
        
        > Remove all the special characters from '@#HE%$LL&^O*@'
          > SELECT  REPLACE (TRANSLATE('@#HE%$LL&^O*@','@#%$&^*','*******'),'*','')  // first translate all the special characters to '*'s, then make it as input to replace
            > Stepl: **HE**LL**O*
            > Step2: HELLO

 > Numeric finctions:
   ===================
   > ABS(): retunrs absolute value
     > Syntax: ABS(NUMBER)
     > Examples:
       > SELECT ABS(10) returns 10
       > SELECT ABS(-10) returns 10 // Always returns positive value

   > POWER():
     > Calculates POWER
     > Syntax: POWER(NUM1,num2)
     > Examples:
       > SELECT POWER(3,2) returns 9

   > SQRT():
     > Returns square root
     > Syntax: SQRT(NUM1)
     > Examples: SELECT SQRT(16) returns 4

   > SQUARE():
     > Returns square of a number
     > Syntax: SQUARE(NUM1)
     > Examples: SELECT SQUARE(5) returns 25
   
   > SIGN():
     > To check whether given number is positive or negative
     > Syntax: SIGN(NUM1)
     > Examples:
        > SELECT SIGN(10) returns 1
        > SELECT SIGN(-10) returns -1
        > SELECT SIGN(0) returns 0

   > Rounding number:
    ------------------
    > ROUND CEILING FLOOR are 3 functions available for Rounding numbers
    
220523

    > ROUND():
     > Rounds number to integer or to decimal places 
     > Round function acts according to average 
     > Syntax: Round(number, decimal places)
     > Examples:
       > SELECT ROUND(38.4567,0) gives 38 //here 0 means this number is rounded to integer
         > If number < Avg rounded to lowest
         > If number >= Avg rounded to highest
       > SELECT ROUND(38.4567,2) gives 38.46
       > SELECT ROUND(38.4547,2) gives 38.45
       > SELECT ROUND(326,-2) gives 400 // -2 means rounding to 100s
         > 300----------350----------400
       > SELECT ROUND(326,-1) gives 360 // -1 means rounding to 10s
         > 350-----------355---------360
       > SELECT ROUND(356,-3) gives 0 // -3 means rounding to 1000s
         > 0-------------500---------1000

       > SELECT ROUND(4567,-1),ROUND(4567,-2),ROUND(4567,-3)
         >            4570           4600            5000

    > CEILING():
      > Rounds number always to highest
      > Example:
        > SELECT FLOOR(38.9) gives 38
    
  > Conversion funcitons:
    ---------------------
    > Used to convert one datatype to another datatype
    > There are two fucntions available CAST CONVERT
    > CAST():
      > Syntax
        > CAST(SOURCE-EXPR AS TARGETTYPE)
      > Examples:
        > SELECT CAST(10.5 AS INT) gives 10 // 10.5 is converted to integer
        > SELECT CAST(10 AS DECIMAL) gives 10

        > Display employees 'Smith earns 800', 'ALLEN earns 1600' from EMP Table
          > SELECT ENAME + 'ears' + SAL FROM EMP gives ERROR // All must be character type for concatination
          > SELECT ENAME + 'ears' + CAST(SAL AS VARCHAR) FROM EMP

        > Display 'Smith joined on 1980-12-17 as clerk'
          > SELECT ENAME + ' joined on' + CAST(HIREDATE AS VARCHAR) + 'as' + job FROM EMP
    
    > CONVERT():
      > Syntax:
        > CONVERT(target-type,source-expr)
      > Example:
        > SELECT CONVERT(INT,10.5) gives 10
    
     Note: Using convert we can display dates/money in different formats which is not possible in cast 
      > Date styles:
        > CONVERT(VARCHAR,DATE,STYLE-NUMBER) 
        > Examples:
          > SELECT CONVERT(VARCHAR,GETDATE(),101) gives 05/22/2023 // 101 is predefines style number
          > SELECT CONVERT(VARCHAR,GETDATE(),102) gives 2023.05.22 
            > like this predefined Style-number ranges from 100 to 115 
            > Compared to this FORMAT is more felxible
        
          > Display ENAME, HIREDATE as dd-MM-yyyy format
            > SELECT ENAME,CONVERT(VARCHAR,HIREDATE,105) AS HIREDATE FROM EMP
          > DATEADD with CONVERT
            > SELECT DATEADD(DD,5,CONVERT(DATE,'10/05/2023',103)) gives 2023-05-15 // here with CONVERT date is treated as dd/MM/yyy
            > SELECT DATEADD(DD,5,'10-05-2023') gives 2023-10-10 00:00:00.000  // here without CONVERT date is treated as MM/dd/yyy
      
      > Money styles:
        > Syntax:
          > CONVERT(CARCHAR,NONEY,STYLE-NUMBER)
          > SELECT ENAME,CONVERT(VARCHAR,SAL,0) AS SAL FROM EMP
         > Exmaples:  
           > SELECT ENAME,CONVERT(VARCHAR,SAL,0) AS SAL FROM EMP
           > SELECT ENAME,CONVERT(VARCHAR,SAL,1) AS SAL FROM EMP
           > SELECT ENAME,CONVERT(VARCHAR,SAL,2) AS SAL FROM EMP
           > SELECT CONVERT(VARCHAR,CAST(5000 AS MONEY),1) gives 5,000.00
      
  > SPECIAL Functions:
    ------------------
    > ISNULL():
      > Function used to convert null values
      > This is used to skip NULL // as  NULL +-* NULL is NULL
      > Syntax:
        > ISNULL(arg1,arg2)
      > Example:
        > SELECT ISNULL(100,200) gives 100 // as first arg is not equal to null
        > SELECT ISNULL(NULL,200) gives 00 // as first arg is equal to null gives arg2

        > Display Employee salary with commision
          > SELECT ENAME,SAL,COMM,SAL+COMM AS TOTSAL FROM EMP // Emplouyees with NULL commission were gives NULL TOTALSAL
          > SELECT ENAME,SAL,COMM,SAL+ISNULL(COMM,0) AS TOTSAL FROM EMP gives SAL + COMM // NULL is taken as 0

230523

        > Display ENAME SAL COMM TOTSAL, if COMM is NULL display 'No Commission'
          > SELECT ENAME,SAL,ISNULL(CAST(COMM AS VARCHAR),'NO COMM') AS COMM FROM EMP // ISNULL(arg1,arg2) arg2 must be same type as arg1 type
        
  > Analytical functions or window functions:
    =========================================
    > Mainly useed for data analysis
    > Mainly there two functions RANK, DENSE_RANK
      > These both functions are used to find ranks
      > Ranking is always based on columns like SAL,HIREDATE etc
      > For rank functions data must be sorted 
      > Syntax
        > RANK() OVER ( ORDER BY COLNAME ASC/DESC)
        > DENSE_RANK() OVER ( ORDER BY COLNAME ASC/DESC)
      > Examples:
        > RANK() OVER(ORDER BY SAL DESC)
        > RANK() OVER(ORDER BY SAL ASC)
        > Find ranks of the empleyees based on salary and highest paid should get first rank
          > SELECT ENAME,SAL,RANK() OVER(ORDER BY SAL DESC) AS RANK FROM EMP
          > SELECT ENAME,SAL,DENSE_RANK() OVER(ORDER BY SAL DESC) AS RANK FROM EMP
      > Difference between RANK and DENSE_RANK
        > RANK function generate gaps but DENSE_RANK will not generate gaps
        > RANK function ranks may not be in sequence but in DENSE_RANK rank is always in sequence
        > Example
          > SAL       RANK       DENSE_RANK
            5000      1          1
            4000      2          2
            3000      3          3
            3000      3          3
            3000      3          3
            2000      6          4
            2000      6          4
            1000      8          5
        > Display ranks of Emplouyees based on hiredate
          > SELECT ENAME,HIREDATE,DENSE_RANK() OVER (ORDER BY HIREDATE ASC) AS RANK FROM EMP
        > Display ranks of Emplouyees based on salary and if have same salary then rank bansed on hiredate
          > SELECT ENAME,HIREDATE,SAL,DENSE_RANK() OVER (ORDER BY SAL DESC,HIREDATE ASC) AS RANK FROM EMP
      
    > PARTITION BY clause:
      --------------------
      > Used to find ranks within group
        > Display ranks within a department
          > Divide table department wise
          > Apply DENSE_RANK on each department instead of ranking whole table
          > SELECT ENAME,HIREDATE,SAL,DEPT, DENSE_RANK() OVER(PARTITION BY DEPT ORDER BY SAL DESC) AS RANK FROM EMP
    
    > ROW_NUMBER():
      -------------
      > Returns record number
      > Also based on some column
      > Syntax:
        > ROW_NUMBER() OVER(ORDER BY COLNAME ASC/DESC,---)
      > Examples:
        > SELECT EMPNO, ENAME, SAL, ROW_NUMBER() OVER(ORDER BY SAL DESC) AS RNO FROM EMP
        > SELECT EMPNO, ENAME, SAL, ROW_NUMBER() OVER(ORDER BY EMPNO ASC) AS RNO FROM EMP
    
    > LAG() & LEAD():
      ---------------
      > LAG(COLNAME,INT) OVER (ORDER BY COLNAME) returns previous value
      > LEAD(COLNAME,INT) OVER (ORDER BY COLNAME) returns next value
      > SELECT EMPNO, ENAME, HIREDATE, SAL, LAG(SAL,1) OVER( ORDER BY HIREDATE ASC) AS PREV_SAL FROM EMP 
      > After how many days employee hired in EMP table
        > SELECT EMPNO, ENAME, HIREDATE, LAG( HIREDATE,1) OVER ( ORDER BY HIREDATE ASC ) AS PREV_HIREDATE FROM EMP
        > SELECT EMPNO, ENAME, HIREDATE, LAG( HIREDATE,1) OVER ( ORDER BY HIREDATE ASC ) AS PREV_HIREDATE, DATEDIFF(DD,LAG(HIREDATE,1) OVER (ORDER BY HIREDATE ASC),HIREDATE) AS DAYS FROM EMP
      > Days between the two employees hiredate in EMP Table
        > SELECT EMPNO, ENAME, HIREDATE, LAG( HIREDATE,1) OVER ( ORDER BY HIREDATE ASC ) AS PREV_HIREDATE, DATEDIFF(DD,LAG(HIREDATE,1) OVER (ORDER BY HIREDATE ASC), HIREDATE) AS GAP FROM EMP
        >  

 


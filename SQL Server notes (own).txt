Creating new DB
===============
 After loggin
 >Right click on Databases
  >New Database 
   > (two files are created, one is data file .MDF and one is log file .LDF )

 To find it in explorer (to find files in your system)
 ----------------------
 >Programfiles
  >Microsoft SQL Server
   >MSSQL 15.MSSQLSERVER
    >MSSQL
     >DATA
      >(your created DB)

Datatypes
=========
 >CHAR
  >ASCII // char/varchar allows ascii characters (256 characters) that includes a-z, A-Z, 0-9, special characters, i.e., char/varchar allows alphanumeric
   Examples: PANNO CHAR(10), VEHNO CHAR(10), EMAIL VARCHAR(20)

   >char //allows character data upto 8000 characters,
    recommended for fixed length character columns. 
    Example: NAME CHAR(10) here name can be upto 10 characters,
    in char data type extra bytes are wasted, 
    so char is not recommended for variable length fields 
    and is recommended for fixed length fields.
    Example: GENDER CHAR(1) M F , STATE_CODE CHAR(2) AP TS MH, COUNTRY_CODE CHAR(3) IND USA 
               
   >varchar //for variable length use varchar, allows character data upto 8000.
    Example: NAME VARCHAR(10) SACHIN here extra bytes i.e., 4 bytes are released and 
    allocated to other data

   >varchar(max) //to store more than 8000 characters use varchar(max), upto 2GB, 

  >UNICODE // allows unicode characters (65536 characters),
   that includes characters of diff languages.
   >nchar
   >nvarchar
   >nvarchar(max)

 >INTEGER // allows numbers without decimal part
   >tinyint // 1 byte, value between 0 to 255, Examples: AGE
   >smallint // 2 bytes, value between -32768 to 32768, Examples: EMPID
   >int // 4 bytes, value between -2147483648 to 2147483647
   >bigint // 8 bytes, valid number between -9223372036854775808 to 9223372036854775807

   >numberic(p) // allows numbers upto 38 digits, Examples: EMPID NUMERIC(4) here maximum 
    four digits are allowed like 10, 100, 1000, 2000 but 10000 which is 5 characters not allowed
    AADHARNO NUMERIC(12), ACCNO NUMERIC(13), MOBILE NUMERIC(10)

 >FLOAT
   >numeric(p,s) or decimal(p,s) // allows numbers with decimal (float).
    here P means precision that is total number of digits, 
    S means scale that is number of digits after decimal.
    Examples: SAlARY NUMERIC(7,2) like 10000.50 is valid 500000.60 is invalid, 

 >CURRENCY // used for fields related to money
   >smallmoney // 4 bytes, range is -214748.3648 to 214748.3647
   >money // 8 bytes, range is -922337203685477.5808 to 922337203685477.5807
   Exmaples: SAL SMALLMONEY, BAL MONEY

 >DATE 
   >date // only date
   >time // only time
   >datetime // allows date and time
  Defalut date format for SQL Server is YYYY-MM-DD
  Default time format for SQL Server is HH:MM:SS
  Example: DOB DATE, LOGIN TIME, TXNDT DATETIME gives like 2023-05-11 9:30:00

 >BINARY // allows mutimedia objects like audio, video, images
   >binary // allows upto 8000 bytes
   >varbinary // allows upto 8000 bytes
   >varbinary(max) // allows upto 2GB
  Example: photo BINARY(1000) here 1000 bytes allocated for photo and extra bytes are wasted.
  photo VARBINARY(1000) here extra bytes are released

To Work with Database
=====================
 >Right click on Databases
  >New Querry // Querry window opens

Creating TABLE 
==============
 > Tablename should start with alphabet, no spaces, only _ $ # are allowed,
   can be upto 128 characters, can have 1024 columns, unlimited rows
   Examples: 123EMPID invalid, EMP 123 INVALID, EMP*123 INVALID, EMP_123 VALID

 CREATE TABLE EMP
 (
 EMPID SMALLINT,
 ENAME VARCHAR(10),
 JOB VARCHAR(10),
 SAL SMALLMONEY,
 HIREDATE DATE,
 DNO TINYINT
 )

Inserting Date into table
=========================
 > "INSERT" command for inserting data
   > we can insert single row or multiple rows

   > Inserting single row
     --------------------
    > INSERT INTO <TABLENAME> VALUES(V1, V2, V3, V4, V5, V6,.....)
    Examples:
     > INSERT INTO EMP VALUES(100,'SACHIN','CLERK',5000,'2023-05-11',10)

120523

 Operators in SQL Server
 =======================

 + - * / % for calculation
 gives value as output

 Relational operators in SQL Server
 ==================================

 => > >= < <= = <> or !=
 gives True/False as output

 10 > 5 True
 10 < 5 False
 10 = 5 False
 10 <> 5 True ~ 10 != 5 True

 Logical Operators in SQL Server
 ===============================

 AND OR NOT

 Special Operators in SQL Server
 ===============================

 BETWEEN
 IN
 LIKE
 IS
 ANY
 ALL
 EXITS

 Set Operators in SQL Server
 ===========================

 UNION
 UNION ALL
 INTERSECT
 EXCEPT

 Display Data in SQL Server
 ==========================
 
 > "SELECT" command is used to display data from the table.

 syn: SELECT <col/*> FROM <tabname>; // this whole statement is called querry or command and SELECT and FROM  are called clauses

 SQL = English
 QUERIES = Sentences
 CLAUSES = Words

 FROM clause -> specify tablename
 SELECT clause -> specify column names
 * -> all columns

 > Display employee names and salaries/hiredate/dno
 SELECT ENAME,SAL FROM EMP
 SELECT ENAME,HIREDATE FROM EMP
 SELECT ENAME,DNO FROM EMP

 >Display all the data from EMP
 SELECT * FROM EMP //shows all the data

 >WHERE caluse: ( Display specific )
 ===============
 Used to access specific row/rows based on a condition

 SELECT columns
 FROM tabname
 WHERE condition

 conditions: ( made of relational operators )
  COLNAME OP VALUE
   > OP is any relational operator like > >= < <= = <>
   > if cond is true row is selected
   > if cond is false row is not selected
 Examples:
 ---------
  Display employee details whose id = 102
  > SELECT * FROM EMP WHERE EMPID=102 // goes every row and checks true or false and shows all the datails because '*'
  > SELECT ENAME FROM EMP WHERE EMPID=102 //only name will be shown here 
  Display employee details whose name = 'Kumar'
  > SELECT * FROM EMP WHERE ENAME = 'Kumar' // '' mandatory to display sting
  Display employee details who earn more then 5000
  > SELECT * FROM EMP WHERE SAL > 5000
  Display employees joined after 2020
  > SELECT * FROM EMP WHERE HIREDATE > 2020 // date is incompatable with number
  > SELECT * FROM EMP WHERE HIREDATE > '2020-12-31' // Hiredate date type is compated with '2020-12-31' which is also date type
  Display employees joined before 2020
  > SELECT * FROM EMP WHERE HIREDATE < '2020-01-01'
  Display employees not working for Dno 10
  > SELECT * FROM EMP WHERE DNO <> 10

 Adding multiple condtions to single querry
 Compound condtion:
 ==================
 Multilple condtions combined with AND / OR operators is called compound condtion.
 > WHERE COND1 AND/OR COND2 
 Examples:
 ---------
  > WHERE CATEGORY = 'MOBILES' AND PRICE < 20000 // only mobiles under 20000
  > WHERE CATEGORY = 'MOBILES' OR PRICE < 20000 // any product that is under 20000, satisfying one condtion is enough
  Display Employee details whose id = 100, 103, 105
  > SELECT * FROM EMP WHERE EMPID = 100 OR EMPID = 103 OR EMPID = 105
  Display employees working as clerk, analyst
  > SELECT * FROM EMP WHERE JOB = 'CLERK' OR JOB = 'ANALYST'
  Display employees working as analyst beloging to 20th Dept
  > SELECT * FROM EMP WHERE JOB = 'ANALYST' AND DNO = '20'
  Display employees earning >5000 and <10000
  > SELECT * FROM EMP WHERE SAL > 5000 AND SAL < 10000
  Display employees joined in 2020
  > SELECT * FROM EMP WHERE HIREDATE >= '2020-01-01' AND HIREDATE <= '2020-12-31'
  Display employees working as clerk, analyst and earning more than 5000
  > SELECT * FROM EMP WHERE JOB = 'CLERK' OR JOB = 'ANALYST' AND SAL > 5000 // here JOB = 'ANALYST' AND SAL = 5000 are compared first i.e AND is prioritized and then it'll compare with JOB = 'CLERK'
  > SELECT * FROM EMP WHERE ( JOB = 'CLERK' OR JOB = 'ANALYST' ) AND SAL > 5000 // () to force comparision
   
 
130523

  IN Operator
  ===========
   >Use IN operator for comparision with list.
    >List is like 10, 20, 30, 40...
   >Use IN operator for "=" comparision with multiple values.
    > WHERE COLNAME = V1,V2,V3... //is invalid, = cannot be used with multiple values
    > WHERE COLNAME IN(V1,V2,V3...) //is valid, if you want to use = with multiple values

    >Display employees whose id = 100,103,105
      > SELECT * FROM EMP WHERE EMPID IN (100,103,105) //Old WHERE EMPID = 100 OR EMPID = 103 OR EMPID =105
    >Display employees working as clerk, manger
     > SELECT * FROM EMP WHERE JOB IN ('CLERK', 'MANAGER')
    >Display employees not working for deptno 10,20
     > SELECT * FROM EMP WHERE DNO NOT IN (10,20)

  WHERE Operator
  ==============
   >Use BETWEEN operator for comeparision with range
    >like 10 to 50 is called range ( all the values between 10 and 50 are included i.e., 10,11,12,.....48,49,50)
    > WHERE COLNAME BETWEEN V1 AND V2 // is equivalent to COL>=V1 AND COL<=V2

    >Display the employees earning between 5000 and 10000
     > SELECT * FROM EMP WHERE SAL BETWEEN 5000 AND 10000 //always use BETWEEN with lower limit and Upper limit
    >Display the employees joined in 2020 year
     > SELECT * FROM EMP WHERE HIREDATE BETWEEN '2020-01-01' AND '2020-12-31'
    >Display the employees not joined in 2020 year
     > SELECT * FROM EMP WHERE HIREDATE NOT BETWEEN '2020-01-01' AND '2020-12-31'
    >Display the employees working as Clerk, manager and earning between 5000 and 10000 and joined in 2019 and not working for deptno 10,20
     > SELECT * FROM EMP WHERE JOB IN ('CLERK', 'MANAGER') AND SAL BETWEEN 5000 AND 10000 AND HIREDATE BETWEEN '2019-01-01' AND '2019-12-31' AND DNO NOT IN (10,20)
    
    PRODUCTS
    PRODID PNAME PRICE CATEGORY BRAND
    
    >Display list of Samsung, Redmi, Realme mobile phones between 10000 and 20000
     > SELECT * FROM PRODUCTS WHERE CATEGORY = 'MOBILES' AND BRAND IN ('SAMSUNG', 'REDMI', 'REALME') AND PRICE BETWEEN 10000 AND 20000
    
    CUSTOMERS
    CID NAME CITY AGE GENDER

    >Display the list of male customers staying in HYD, MUM, DEL aged between 20 and 30
     > SELECT * FROM CUSTOMERS WHERE GENDER = 'MALE' AND CITY IN ('HYD', 'MUM', 'DEL') AND AGE BETWEEN 20 AND 30

  LIKE Operator
  =============

   >Use LIKE operator for comparision of patterns
    > WHERE COLNAME LIKE 'PATTERN'
   >Pattern contains alphabets, digits, wildcard characters

   >Wildcard characters
    --------------------
    > % => 0 or many characters
    > _ => exactly 1 characters

    >Display employees with name starting with 'S'
     > SELECT * FROM EMP WHRE ENAME LIKE 'S%'
    >Display employees with name ending with 'S'
     > SELECT * FROM EMP WHERE ENAME LIKE '%S'
    >Display employees with name containing 'A'
     > SELECT * FROM EMP WHERE ENAME LIKE '%A%'
    >Display employees with 'A' is the 3rd character of their name
     > SELECT * FROM EMP WHERE ENAME LIKE '__A%' // two underscores before A
    >Display employees with 'A' is the 3rd character of their name from last 
     > SELECT * FROM EMP WHERE ENAME LIKE '%A__' // two underscores after A
    >Display employees with name containing 4 characters
     > SELECT * FROM EMP WHERE ENAME LIKE '____' // four underscores, each underscore is equal to one character
    >Display employees joined in Feb month
     > SELECT * FROM EMP WHERE HIREDATE LIKE '_____02___' // date format is YYYY-MM-DD , %02% does not give only feb but also take dates like 2002-10-15, 2020-02-10, 2023-01-02 it may be month year or day, by giving _____02___ we're forcing SQL to consider it as month
    >Display employees joined in 2020 year
     > SELECT * FROM EMP WHERE HIREDATE LIKE '2020%' // % replaces -MM-DD or use 6 underscores after 2020
    
